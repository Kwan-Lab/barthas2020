function plot_allCells( cells, eventTimes, plotparams )
% % plot_allCells %
%PURPOSE:   Plot dF/F for all the cells in one imaging session
%AUTHORS:   MJ Siniscalchi 170105
%           modified by AC Kwan 170515
%
%INPUT ARGUMENTS
%   cells:        Structure generated by calc_dFF().
%   eventTimes:   Time of task events to denote in the plot
%   plotparams
%       tRange      Plot only this time range [in minutes]
%       filelabel   Add to the name of the saved .tiff

%% Display parameters
batchSize=35; %plot in batches of 35 cells

spacing = 1;     % in unit of dF/F

if isfield(cells,'dFF')
    nCells = numel(cells.dFF);
elseif isfield(cells,'dFFInfer')
    nCells = numel(cells.dFFInfer);
else
    nCells = 0;
end
t = (cells.t / 60); %Unit: seconds->minutes

if nargin < 3 || ~isfield(plotparams,'tRange')    %if no range specified for x-axis
    plotparams.tRange = [t(1) t(end)]; %plot everything
end
if ~isfield(plotparams,'filelabel')    %if no file name suggested
    plotparams.filelabel = '';
end

%%
numBatch=ceil(nCells/batchSize);

for l=1:numBatch
    cellidx1=(l-1)*batchSize+1;
    cellidx2=cellidx1+batchSize-1;
    if cellidx2>nCells
        cellidx2=nCells;
    end
    
    figure; hold on;
    
    y1 = spacing*0.5;
    y2 = -[spacing*(batchSize+0.5)]; %Cell idx negated so cell 1 is on top
    
    %Plot dF/F for all cells
    for i = cellidx1:cellidx2
        if isfield(cells,'dFF')
            plot(t,cells.dFF{i} - spacing*(i-cellidx1+1),'k','LineWidth',1);
            ylabel('dF/F');
        end
        
        if isfield(cells,'dFFInfer')
            plot(t, cells.dFFInfer{i} - spacing*(i-cellidx1+1), 'color','b','LineWidth',1);
            ylabel('Inferred dF/F');
        end
        
        for j = 1:numel(eventTimes)
            plot(eventTimes(j)/60*[1 1], [y2 y1],'m-','LineWidth',1);
        end
    end
    xlabel('Time (min)');
    title(['Cells ' int2str(cellidx1) ' to ' int2str(cellidx2) ', out of ' int2str(nCells) '.']);
    xlim([plotparams.tRange(1) plotparams.tRange(end)]);
    ylim([y2 y1]);
    xlim([0 5]);
    
    print(gcf,'-dpng',['dff_allCells-' plotparams.filelabel '-' int2str(l)]);    %png format
%    saveas(gcf, ['dff_allCells-' plotparams.filelabel '-' int2str(l)], 'fig');
    
end
