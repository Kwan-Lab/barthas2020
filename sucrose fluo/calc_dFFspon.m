function [ cells ] = calc_dFFspon( stackInfo, corrFactor )
% % calc_dFFspon %
%PURPOSE:   Calculate dF/F from raw fluorescence files (generated by the
%           cellROI program), for spontaneous activity with no need to
%           align to behavioral data
%AUTHORS:   AC Kwan 180810
%
%INPUT ARGUMENTS
%   stackInfo:      content of the stackInfo.mat file for this imaging session
%   corrFactor:     scaling factor, determines how much neuropil
%                   subtraction to apply F(t) = F_soma(t) - (alpha *
%                   F_neuropil(t)); correction factor is alpha. F(t) is the
%                   per-pixel pixel value for the ROI

%OUTPUT ARGUMENTS
%   cells:          a structure containing fields, including dFF

%% CALCULATE dF/F FOR EACH CELL

%if no correction factor specified, assume no neuropil correction
if nargin < 4
    corrFactor = 0;
end

%dF/F = (F(t)-Fo)/Fo
%to estimate Fo (baseline fluorescence), set moving window for smoothing
cells.frameRate = stackInfo.frameRate;
win = 10*60*stackInfo.frameRate;  %window duration = 10 minutes

rois = dir('*cell*.mat');
if numel(rois) > 0  %if there were any cells
    
    disp(['Calculating dF/F (may take several minutes)...']);
    for i = 1:numel(rois)
        celldata = load(rois(i).name);
        
        disp(['Cell ' int2str(i) '/' int2str(numel(rois))]);
        f = celldata.cellf(:);
        
        %neuropil subtraction
        neuropilf = celldata.neuropilf(:);
        f = f - corrFactor * neuropilf;
        
        baseline = nan(size(f));
        for j = 1:length(f)
            idx1 = max(1,round(j-win/2));
            idx2 = min(length(f),round(j+win/2));
            %the following step cuts time from 124 sec to 25 sec per cell, for ~60 min resonant imaging data
            idxStep=max([1 round(0.25*stackInfo.frameRate)]); %use frames up to every 1/4 s
            baseline(j) = prctile(f(idx1:idxStep:idx2),10); %10th percentile of F(t)
        end
        cells.cellf{i} = f; %All column vectors
        cells.baseline{i} = baseline;
        cells.dFF{i} = (f-baseline)./(baseline);
        
        cells.bw{i} = celldata.bw;
        cells.isRedCell{i} = celldata.isRedCell;
    end
    
    cells.t=(1./cells.frameRate).*[0:numel(cells.cellf{1})-1]';
    
end

end