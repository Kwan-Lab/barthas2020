function output = plot_sucrose_beh_horz(sessionData,blocks,plotparams)
% % plot_sucrose_beh_horz %
%PURPOSE:   Plot free-operant sucrose consumption task performance, horizontal view
%AUTHORS:   AC Kwan 170609
%
%INPUT ARGUMENTS
%   sessionData:  Structure generated by sucrose_getSessionData().
%   blocks:       Structure generated by sucrose_getBlockData().
%   fitModel:     True or false, fit to opportunity cost model
%   plotparams:   Parameters to do with how to plot
%       tlabel:       Text to put as title of the plot
%       colors:       Colors assocaited with the reinforcement types
%       symbols:      Symbols associated with the reinforcement types
%
%OUTPUT ARGUMENTS
%   output:       Saves information regarding task engagement
%                   - tSponStart: time when animal lick rate drops below a threshold
%                   - tEnd: time of the last event recorded in log file (the end of the task)
%

%% lick rate as a function of time
output.tEnd=sessionData.timeLastEvent;    %time of last known event logged in the log file

%calculate a histogram of lickrate, gives lick per second
tStep = 10;     %step size for generating lick rate as a function of time
tLick=[0:tStep:output.tEnd];
lickRate=histc(sessionData.lickTimes,tLick)/tStep;   

%when is the animal not engaged in the task?
%find stretches when there is no lick
sponDur = 60;       %in seconds, duration for assessing whether mouse is doing the task
sponDurEdge = 10;   %in seconds, if it is too close to a lick, do not consider as not engaged
%find instances when licks are separated by duration specified by sponDur 
idx = find(diff(sessionData.lickTimes)>=sponDur);
output.tSpon = [];
for j = 1:numel(idx)
    tStart = sessionData.lickTimes(idx(j)) + sponDurEdge;
    tEnd = sessionData.lickTimes(idx(j)+1) - sponDurEdge;
    output.tSpon(j,:) = [tStart tEnd];
end
if (sessionData.timeLastEvent-sessionData.lickTimes(end)>=sponDur)  %if the last lick occurred much earlier than the last task event
    tStart = sessionData.lickTimes(end) + sponDurEdge;
    tEnd = sessionData.timeLastEvent;
    output.tSpon = [output.tSpon; tStart tEnd];
end     
    
%% plot
figure;
subplot(2,1,1); hold on;

% color-code the blocks based on reinforcement type
ymax = ceil(nanmax(lickRate))+2;    %y-axis range
for jj=1:numel(blocks.startTime)
    x1=blocks.startTime(jj)/60; x2=(blocks.startTime(jj)+60)/60; y1=ymax-1; y2=ymax;
    
    if strcmp(blocks.rewardType(jj),'0%')
        col = plotparams.colors{1};
    elseif strcmp(blocks.rewardType(jj),'3% nc')
        col = plotparams.colors{2};
    elseif strcmp(blocks.rewardType(jj),'3% pc')
        col = plotparams.colors{3};
    elseif strcmp(blocks.rewardType(jj),'10%')
        col = plotparams.colors{4};
    end
    
    h=fill([x1 x1 x2 x2],[y1 y2 y2 y1],col);
    set(h,'EdgeColor','None');
end
% plot lick rate
plot(tLick/60,lickRate,'k','LineWidth',2);
% plot when the animal is not licking
for j = 1:size(output.tSpon,1)
    plot([output.tSpon(j,1) output.tSpon(j,2)]/60,[ymax-1.5 ymax-1.5],'r','LineWidth',3);
end
xlabel('Time (min)');
ylabel('Lick rate (Hz)');
ylim([0 ymax]);
xlim([0 output.tEnd/60]);
if ~isempty(output.tSpon)
    title({plotparams.tlabel;['Log file duration: ' int2str(output.tEnd/60) ' min. Sum of spontaneous periods: ' int2str(sum(output.tSpon(:,2)-output.tSpon(:,1))/60) ' min']},'interpreter','none');
else
    title({plotparams.tlabel;['Log file duration: ' int2str(output.tEnd/60) ' min. No spontaneous period found.']},'interpreter','none');
end

print(gcf,'-dpng','session_horz');    %png format
%saveas(gcf, 'session_horz', 'fig');

%% is the lick rate physiological? trying to catch lick detector malfunction
if sum(lickRate > 12) > 2   %if mouse frequently (more than 2 bins) licks faster than 12 Hz
    sum(lickRate > 12)
    error('ERROR -- lick rate seems too high. Lick detector may be malfunctioning.');
end
    
end


