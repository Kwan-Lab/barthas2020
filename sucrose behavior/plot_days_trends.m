function plot_days_trends(val,subj_info,params)
% % plot_days_trends %
%PURPOSE:   Plot behavioral performance across days
%AUTHORS:   AC Kwan 170617

%INPUT ARGUMENTS
%   val:          Vector of the values to be plotted across days
%   subj_info:    Structure generated by groupbysuject().
%   params:       Plotting parameters

%%
numType = size(val,2);   %number of lines to plot per panel
if numType == 1
    col={'k'};
elseif numType == 3
    col={[0.33 0 0.33],[0.66 0 0.66],[1 0 1]};
else
    col={[0 0 0],[0.33 0 0.33],[0.66 0 0.66],[1 0 1]};
end

%% organize data based on subjects
valbySubj = nan(max(subj_info.subjectID),max(subj_info.acqdate),numType);
for j=1:size(val,1)
    for k=1:numType
        valbySubj(subj_info.subjectID(j),subj_info.acqdate(j),k)=val(j,k);
    end
end

%% plot as a function of day per subject
figure;

%number of conditions (e.g., control, susceptible, resilient)
if isfield(subj_info,'subjClassif') %split into susceptible/resilient
    subjCond = subj_info.subjClassif;
    subjCondLabel = subj_info.classiflabel;
else
    subjCond = subj_info.subjCond;
    subjCondLabel = subj_info.condlabel;
end
condList = unique(subjCond);
nCond = numel(condList);

dat = [];
for j=1:nCond
       
    %% plot trend line over days
    subplot(2,3,j); hold on;
    
    % shade the chronic stress period
    x1=-0.5; x2=range(params.stressDays)+0.5;
    patch([x1 x2 x2 x1],[params.yrange2(1) params.yrange2(1) params.yrange2(2) params.yrange2(2)],params.stress_shade,'EdgeColor','none');
    plot([0 params.maxDay] - params.stressDays(1),params.ybaseline*[1 1],'k--','LineWidth',2);
    
    h = []; 
    for kk=1:numType  %for each reinforcement block type, plot a line
        
        %only include data if there are valid values for days specified in params.daysForBarPlot
        temp=[];
        for ll=1:numel(params.daysForBarPlot)
            temp(:,ll,:) = nanmean(valbySubj(subjCond==condList(j),params.daysForBarPlot{ll},kk),2);   %arrange across the specified days
        end
        nanInRows = sum(isnan(temp),2)>0;  %any subject with missing data
        
        % population summary, e.g. mean and sem
        temp = [];
        temp = valbySubj(subjCond==condList(j),:,kk);
        temp = temp(~nanInRows,:);         %remove subjects with missing data
        
        tempday = find(sum(~isnan(temp),1)>0);    %days with non-NaN entries
        tempday = tempday - params.stressDays(1);        %zero at the first stress day
        tempmean = squeeze(nanmean(temp,1));
        tempsem = squeeze(nanstd(temp,[],1))./sqrt(size(temp,1));
        tempmean = tempmean(~isnan(tempmean)); %days with non-NAN entries
        tempsem = tempsem(~isnan(tempsem));    %days with non-NaN entries
        
        tempmean=tempmean(tempday<=(params.maxDay-params.stressDays(1)));
        tempsem=tempsem(tempday<=(params.maxDay-params.stressDays(1)));
        tempday=tempday(tempday<=(params.maxDay-params.stressDays(1)));
        
        h(kk)=plot(tempday,tempmean,'^-','Color',col{kk},'MarkerSize',12,'LineWidth',3);                
        for jj=1:numel(tempday)  %plot mean
            plot(tempday(jj)*[1 1],tempmean(jj)+tempsem(jj)*[-1 1],'-','Color',col{kk},'LineWidth',3);
        end
        
        dat{j}(:,:,kk) = temp; %saves data to do stats later
    end
    
    xlim([0 params.maxDay] - params.stressDays(1));
    ylim(params.yrange2);
    xlabel('Day');
    if j==1
        ylabel(params.ytitle);
        if isfield(params,'linelabels')
            legend(fliplr(h),fliplr(params.linelabels),'location','northwest');
            legend boxoff;
        end
    end
    title([subjCondLabel{j} ' (n = ' int2str(size(temp,1)) ')']);
end

%% anova test for the bar graph
for j=1:nCond
    
    disp(['----- Condition ' subjCondLabel{j} ' --- ANOVA:']);
    currdat = dat{j};
    
    subj=[]; day=[]; rtype=[];
    for ii=1:size(currdat,1)          %subject
        for jj=1:size(currdat,2)      %days
            for kk=1:size(currdat,3)  %reward type
                subj(ii,jj,kk)=ii;
                day(ii,jj,kk)=jj;
                rtype(ii,jj,kk)=kk;
            end
        end
    end
    
    currdat = currdat(:);
    subj = subj(:);
    day = day(:);
    rtype = rtype(:);
    
    isdat = currdat(~isnan(currdat));
    subj = subj(~isnan(currdat));
    day = day(~isnan(currdat));
    rtype = rtype(~isnan(currdat));
    
    % repeated measures ANOVA
    % https://www.mathworks.com/matlabcentral/newsreader/view_thread/58226
    terms=[1 0 0; 0 1 0; 1 1 0];  %interaction terms

    % nested may be more accurate, but cannot use with post hoc multiple comparison
    %    [p,tab,stats]=anovan(currdat,{rtype day subj},'random',3,'nested',[0 0 0; 0 0 0; 1 0 0],'model',terms,'varnames',{'Reward type' 'Days' 'Subjects'},'display','off');
    [p,tab,stats]=anovan(isdat,{rtype day subj},'random',3,'model',terms,'varnames',{'Reward type' 'Days' 'Subjects'},'display','off');
    tab
%     if numel(unique(rtype))>1
%         [c,m,h,nms] = multcompare(stats,'Dimension',[1 2]);
%         c
%         pause;
%     else
%         [c,m,h,nms] = multcompare(stats,'Dimension',[2]);
%         c
%         pause;
%     end
    
end

end


